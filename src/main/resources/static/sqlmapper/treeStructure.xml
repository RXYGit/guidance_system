<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.yd.mapper.TreeStructureMapper">
	<!--0.1 查询组 入参是一个字符串数值，出参是一个List-->
	<select id="grpQryList" parameterType="string" resultType="java.util.HashMap">
		select a.`id`,a.`grp_type`,a.`grp_name`,a.`grp_creator`,a.`grp_is_effective` from `zyzx_sd_dy_group` a where a.`id`=#{grpId} and a.`grp_is_effective`='0'
	</select>
	<!--0.2 查询节点集合 入参Map,通过key获取所有属于同一个组的节点，出参同组的节点Map-->
	<select id="nodeQryReqMap" parameterType="java.util.Map" resultType="java.util.HashMap">
		select a.`id`,a.`node_parent_id`,a.`node_grp_id`,a.`node_word_cal`,a.`node_title`,a.`node_quest`,a.`node_style`,a.`node_circulate`,a.`node_layout`,a.`node_is_effective`,a.`ext1`,a.`ext2`,a.`ext3`,a.`ext4`
		from `zyzx_sd_dy_node` a
		where a.`node_is_effective`='0'
		  and a.`node_grp_id`=#{nodeGrpId}
	</select>
	<!--0.3 查询标签集合 入参节点的id，出参属于同一个节点id的标签的Map-->
	<select id="tagQryList" resultType="java.util.HashMap">
		select b.`id`, b.`tag_node_id`, b.`tag_attr_id`, b.`tag_name`, b.`tag_value`, b.`tag_class`, b.`tag_access_way`, b.`tag_js_function`, b.`tag_sort`, b.`tag_type`, b.`tag_html`, b.`tag_is_effective`,b.`tag_is_circulation`,b.`tag_text`, b.`ext1`, b.`ext2`, b.`ext3`, b.`ext4`
		from `zyzx_sd_dy_tag` b
		WHERE b.`tag_is_effective`='0'
		  and b.`tag_is_circulation` ='0'
		  and b.`tag_node_id`=#{id} ORDER BY b.`tag_sort`
	</select>
	<!--0.4 查询标签属性集合 入参List标签的id作为属性的条件，出参属于同一个标签的属性 -->
	<select id="attrQryList" parameterType="java.util.List" resultType="java.util.HashMap">
		select c.`id`, c.`attr_tag_id`, c.`attr_name`, c.`attr_value`, c.`attr_is_effective`,c.`attr_is_effective`, c.`ext1`, c.`ext2`, c.`ext3`, c.`ext4`
		from `zyzx_sd_dy_tag_attribute` c WHERE c.`attr_is_effective`='0' AND c.`attr_tag_id`= #{ids.id}
	</select>
	<!--0.5 查询一个节点的整个树形结构   入参一个节点的map,父级节点等于一个节点的id为条件，然后通过key获取value,出参为Map,挂在节点下面，存在多级节点-->
	<select id="allTreeListQry" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT t.`node_grp_id`,t.id,t.`node_parent_id`,t.`node_style`,t.`node_circulate`,t.`node_layout`,t.`node_quest`,t.`node_word_cal`,t.`node_title`,t.`node_is_effective`
		FROM zyzx_sd_dy_node t
		WHERE t.`node_grp_id`=#{node_grp_id}
		  AND t.`node_parent_id`=#{id}
	</select>




	<!--***********************************批量执行，入参Map,出参Map，where动态条件 2020-07-22***Junit测试*************************************************************-->
	<resultMap id="resultNodeList" type="java.util.HashMap">
		<result column="id" property="id" />
		<result column="node_parent_id" property="nodeParentId" javaType="java.lang.String" jdbcType="VARCHAR" />
		<result column="node_grp_id" property="nodeGrpId" />
		<result column="node_word_cal" property="nodeWordCal" />
		<result column="node_title" property="nodeTitle" />
		<result column="node_quest" property="nodeQuest" />
		<result column="node_style" property="nodeStyle" />
		<result column="node_is_effective" property="nodeIsEffective" />
		<result column="node_circulate" property="nodeCirculate" />
		<result column="node_layout" property="nodeLayout" />
		<result column="ext1" property="ext1" />
		<result column="ext2" property="ext2" />
		<result column="ext3" property="ext3" />
		<result column="ext4" property="ext4" />
	</resultMap>
	<!--1.1-1 对节点的查询的如果入参是Map包含List,从List取参数数据,情况下 creat by rxy 2020-07-22 begin-->
	<select id="nodeSelectList" parameterType="java.util.List"  resultMap="resultNodeList">
		select * from `zyzx_sd_dy_node` b
		<where>
			b.`id` in
			<foreach collection="list" item="ids" index="index"  open = "(" separator = "," close = ")">
				<choose>
					<when test="ids.containsKey('id')"> #{ids.id}</when>
					<when test="ids.id == ''">1>2</when>
				</choose>
			</foreach>
		</where>
	</select>

	<!--1.1-2 对节点的查询的如果入参是Map,情况下 creat by rxy 2020-07-22 begin -->
	<select id="nodeSelectMap" parameterType="java.util.HashMap" resultMap="resultNodeList">
		select a.`id`,a.`node_parent_id`,a.`node_grp_id`,a.`node_word_cal`,a.`node_title`,a.`node_quest`,a.`node_style`,a.`node_circulate`,a.`node_layout`,a.`node_is_effective`,a.`ext1`,a.`ext2`,a.`ext3`,a.`ext4` from `zyzx_sd_dy_node` a
		<where>
			<if test="_parameter.containsKey('node_parent_id')">
				a.`id`=#{id}
			</if>
		</where>
	</select>

	<!--1.2-1节点的更新（删除），包含入参Map和批量更新的的操作-->
	<update id="nodeUpdateMap" parameterType="java.util.Map">
		<!-- 接收list参数，循环着组装sql语句，注意for循环的写法
                   separator=";" 代表着每次循环完，在sql后面放一个分号
                   item="params" 循环List的每条的结果集
                   collection="paramMap"  这是list的key 即为 map传过来的集合参数key -->
		<foreach collection="paramMap" separator=";" item="params">
		update `zyzx_sd_dy_node` a
		    <set>
		    	a.`node_is_effective`=#{params.node_is_effective}
				<if test="params.containsKey('node_is_effective')">
					<where>a.`id`=#{params.id}</where>
				</if>
			</set>
		</foreach>
	</update>

	<!--1.3-1节点的新增，包含入参Map和批量更新的的操作-->
	<update id="nodeInserteMap" parameterType="java.util.Map">
		<foreach collection="paramMap" separator=";" item="param">
			insert into `zyzx_sd_dy_node`(`id`,`node_is_effective`,`node_parent_id`) values (#{param.id},#{param.node_is_effective},#{param.node_parent_id})
		</foreach>
	</update>


	<!--2.1 流转到下一节点同时返回下一节点信息(返回当前节点上的所有信息，并且同时返回下一个节点的上的所有信息)-->
	<select id="nodeAndNextNodeMsg" parameterType="java.util.Map" resultType="java.util.HashMap">
		select a.`id`,a.`node_parent_id`,a.`node_grp_id`,a.`node_word_cal`,a.`node_title`,a.`node_quest`,a.`node_style`,a.`node_circulate`,a.`node_layout`,a.`node_is_effective`,a.`ext1`,a.`ext2`,a.`ext3`,a.`ext4`
		from `zyzx_sd_dy_node` a
		where a.`node_is_effective`='0'
		  and a.`id`=#{id}
	</select>
	<!--2.2 获取属于当前节点的下一级的节点的集合-->
	<select id="nextNodeList" parameterType="java.util.Map" resultType="java.util.HashMap">
		select a.`id`,a.`node_parent_id`,a.`node_grp_id`,a.`node_word_cal`,a.`node_title`,a.`node_quest`,a.`node_style`,a.`node_circulate`,a.`node_layout`,a.`node_is_effective`,a.`ext1`,a.`ext2`,a.`ext3`,a.`ext4`
		from `zyzx_sd_dy_node` a
		where a.`node_is_effective`='0'
		  and a.`node_grp_id`=#{node_grp_id}
		  and a.`node_parent_id`=#{id}
	</select>

	<!--3.1.1 获取当前节点的规则的信息，内部包含规则的要素    也用于判断节点选项是否符合规则-->
	<select id="nodeRuleMsg" parameterType="java.util.Map" resultType="java.util.HashMap">
		select a.`id`,a.`rule_start_node`,a.`rule_target_node`,a.`rule_name`,a.`rule_type`,a.`rule_is_effective`,a.`rule_priority`,a.`ext1`,a.`ext2`,a.`ext3`,a.`ext4`
		from `zyzx_sd_dy_rule` a
		where a.`rule_start_node`=#{id} and a.`rule_is_effective`='0'
	</select>
	<!--3.1.2 当前节点的规则的id    where条件规则要素的re_rule_id符合规则的id-->
	<select id="ruleStartEndEleMsg" parameterType="java.util.Map"  resultType="java.util.HashMap">
		select a.`id`,a.`re_rule_id`,a.`re_param`,a.`re_accord`,a.`re_range`,a.`re_result`,a.`re_is_effective`,a.`ext1`,a.`ext2`,a.`ext3`,a.`ext4`
		from `zyzx_sd_dy_rule_element` a
		where a.`re_is_effective`='0' and a.`re_rule_id`=#{id}
			<!--<if test="_parameter.containsKey('rule_start_node')">
			</if>-->
	</select>


</mapper>



